const TelegramBot = require("node-telegram-bot-api")

// Bot configuration
const BOT_TOKEN = "8363752447:AAHzgO58VhTfLVKoLK076XHE1twF-RqUoOM"
const ADMIN_ID = "6643046428"
const PRIVATE_CHANNEL_LINK = "https://t.me/+6lxklXLAoeo0MjBl"
const BKASH_NUMBER = "01745715199"
const NAGAD_NUMBER = "01610916777"

// Create bot instance
const bot = new TelegramBot(BOT_TOKEN, { polling: true })

// In-memory storage for user sessions (in production, use a database)
const userSessions = new Map()

// Subscription plans
const SUBSCRIPTION_PLANS = {
  "1_month": { duration: "1 ‡¶Æ‡¶æ‡¶∏", price: 15, days: 30 },
  "2_month": { duration: "2 ‡¶Æ‡¶æ‡¶∏", price: 25, days: 60 },
  "3_month": { duration: "3 ‡¶Æ‡¶æ‡¶∏", price: 40, days: 90 },
}

// Start command handler
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id

  // Initialize user session
  userSessions.set(userId, {
    chatId: chatId,
    step: "start",
    selectedPlan: null,
    paymentMethod: null,
    paymentPending: false,
  })

  const welcomeMessage = `
üé¨ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ Movies Verse BD ‡¶§‡ßá! üé¨

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶â‡¶™‡¶≠‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®:
‚úÖ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ì ‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú
‚úÖ HD ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø
‚úÖ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
‚úÖ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§

‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:
  `

  const keyboard = {
    inline_keyboard: [[{ text: "üéØ Movies Verse BD Premium", callback_data: "show_plans" }]],
  }

  bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard })
})

// Callback query handler
bot.on("callback_query", (callbackQuery) => {
  const msg = callbackQuery.message
  const chatId = msg.chat.id
  const userId = callbackQuery.from.id
  const data = callbackQuery.data

  // Get or create user session
  const session = userSessions.get(userId) || {
    chatId: chatId,
    step: "start",
    selectedPlan: null,
    paymentMethod: null,
    paymentPending: false,
  }

  switch (data) {
    case "show_plans":
      showSubscriptionPlans(chatId, userId)
      break

    case "1_month":
    case "2_month":
    case "3_month":
      session.selectedPlan = data
      session.step = "plan_selected"
      userSessions.set(userId, session)
      showPaymentMethods(chatId, data)
      break

    case "payment_bkash":
    case "payment_nagad":
      session.paymentMethod = data
      session.step = "payment_method_selected"
      userSessions.set(userId, session)
      showPaymentInstructions(chatId, userId, data)
      break

    case "payment_completed":
      handlePaymentCompleted(chatId, userId)
      break

    case "back_to_plans":
      showSubscriptionPlans(chatId, userId)
      break
  }

  // Answer callback query to remove loading state
  bot.answerCallbackQuery(callbackQuery.id)
})

// Show subscription plans
function showSubscriptionPlans(chatId, userId) {
  const session = userSessions.get(userId)
  session.step = "selecting_plan"
  userSessions.set(userId, session)

  const message = `
üíé Movies Verse BD Premium Subscription üíé

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:

üî• ‡¶∏‡¶ï‡¶≤ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶¨‡ßá‡¶®:
‚Ä¢ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ì ‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú
‚Ä¢ HD ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì
‚Ä¢ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
‚Ä¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ
  `

  const keyboard = {
    inline_keyboard: [
      [{ text: "1 ‡¶Æ‡¶æ‡¶∏ - ‡ßß‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ", callback_data: "1_month" }],
      [{ text: "2 ‡¶Æ‡¶æ‡¶∏ - ‡ß®‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ", callback_data: "2_month" }],
      [{ text: "3 ‡¶Æ‡¶æ‡¶∏ - ‡ß™‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ", callback_data: "3_month" }],
    ],
  }

  bot.sendMessage(chatId, message, { reply_markup: keyboard })
}

// Show payment methods
function showPaymentMethods(chatId, planKey) {
  const plan = SUBSCRIPTION_PLANS[planKey]

  const message = `
‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®: ${plan.duration} - ${plan.price} ‡¶ü‡¶æ‡¶ï‡¶æ

üí≥ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:
  `

  const keyboard = {
    inline_keyboard: [
      [{ text: "üì± bKash", callback_data: "payment_bkash" }],
      [{ text: "üí∞ Nagad", callback_data: "payment_nagad" }],
      [{ text: "‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data: "back_to_plans" }],
    ],
  }

  bot.sendMessage(chatId, message, { reply_markup: keyboard })
}

// Show payment instructions
function showPaymentInstructions(chatId, userId, paymentMethod) {
  const session = userSessions.get(userId)
  const plan = SUBSCRIPTION_PLANS[session.selectedPlan]

  const issBkash = paymentMethod === "payment_bkash"
  const number = issBkash ? BKASH_NUMBER : NAGAD_NUMBER
  const methodName = issBkash ? "bKash" : "Nagad"

  session.paymentPending = true
  session.step = "awaiting_payment"
  userSessions.set(userId, session)

  const message = `
üí≥ ${methodName} ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ

üìã ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®: ${plan.duration}
üí∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${plan.price} ‡¶ü‡¶æ‡¶ï‡¶æ

üìû ${methodName} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: ${number}

üîÑ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ:
1. ${methodName} ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®
2. "Send Money" ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
3. ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: ${number}
4. ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${plan.price} ‡¶ü‡¶æ‡¶ï‡¶æ
5. ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®

‚ö†Ô∏è ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:
‚Ä¢ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
‚Ä¢ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®

‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§
  `

  const keyboard = {
    inline_keyboard: [
      [{ text: "‚úÖ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", callback_data: "payment_completed" }],
      [{ text: "‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data: "show_plans" }],
    ],
  }

  bot.sendMessage(chatId, message, { reply_markup: keyboard })

  // Start payment verification process
  startPaymentVerification(userId)
}

// Handle payment completion
function handlePaymentCompleted(chatId, userId) {
  const session = userSessions.get(userId)

  if (!session.paymentPending) {
    bot.sendMessage(chatId, "‚ùå ‡¶ï‡ßã‡¶® ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶®‡ßá‡¶á‡•§")
    return
  }

  // In a real implementation, you would verify the payment here
  // For now, we'll simulate payment verification
  verifyPayment(userId).then((isVerified) => {
    if (isVerified) {
      grantChannelAccess(chatId, userId)
    } else {
      bot.sendMessage(chatId, "‚ùå ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    }
  })
}

// Payment verification (simplified - in production, integrate with payment gateway)
function verifyPayment(userId) {
  return new Promise((resolve) => {
    // Simulate payment verification delay
    setTimeout(() => {
      // In production, this would check with bKash/Nagad API
      // For demo purposes, we'll assume payment is successful
      resolve(true)
    }, 2000)
  })
}

// Grant channel access
function grantChannelAccess(chatId, userId) {
  const session = userSessions.get(userId)
  const plan = SUBSCRIPTION_PLANS[session.selectedPlan]

  // Update session
  session.paymentPending = false
  session.step = "subscribed"
  session.subscriptionExpiry = new Date(Date.now() + plan.days * 24 * 60 * 60 * 1000)
  userSessions.set(userId, session)

  const congratsMessage = `
üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! üéâ

‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${plan.duration} ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!

üîó ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï:
${PRIVATE_CHANNEL_LINK}

üìÖ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: ${plan.days} ‡¶¶‡¶ø‡¶®
‚è∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑: ${session.subscriptionExpiry.toLocaleDateString("bn-BD")}

üé¨ ‡¶è‡¶ñ‡¶®‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ì ‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú ‡¶â‡¶™‡¶≠‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®!

‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ Movies Verse BD ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø! üíñ
  `

  const keyboard = {
    inline_keyboard: [
      [{ text: "üîó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®", url: PRIVATE_CHANNEL_LINK }],
      [{ text: "üîÑ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®", callback_data: "show_plans" }],
    ],
  }

  bot.sendMessage(chatId, congratsMessage, { reply_markup: keyboard })

  // Notify admin
  notifyAdmin(userId, session)
}

// Start payment verification process
function startPaymentVerification(userId) {
  const session = userSessions.get(userId)

  // Check payment status every 30 seconds for 10 minutes
  const checkInterval = setInterval(() => {
    if (!session.paymentPending) {
      clearInterval(checkInterval)
      return
    }

    // In production, implement actual payment verification
    // This is a simplified version
    console.log(`Checking payment for user ${userId}...`)
  }, 30000)

  // Stop checking after 10 minutes
  setTimeout(() => {
    clearInterval(checkInterval)
    if (session.paymentPending) {
      bot.sendMessage(session.chatId, "‚è∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
      session.paymentPending = false
      userSessions.set(userId, session)
    }
  }, 600000) // 10 minutes
}

// Notify admin about new subscription
function notifyAdmin(userId, session) {
  const plan = SUBSCRIPTION_PLANS[session.selectedPlan]
  const paymentMethod = session.paymentMethod === "payment_bkash" ? "bKash" : "Nagad"

  const adminMessage = `
üîî ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®!

üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: ${userId}
üìã ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®: ${plan.duration}
üí∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${plan.price} ‡¶ü‡¶æ‡¶ï‡¶æ
üí≥ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü: ${paymentMethod}
üìÖ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date().toLocaleString("bn-BD")}
  `

  bot.sendMessage(ADMIN_ID, adminMessage)
}

// Admin commands
bot.onText(/\/admin/, (msg) => {
  const userId = msg.from.id.toString()

  if (userId !== ADMIN_ID) {
    bot.sendMessage(msg.chat.id, "‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
    return
  }

  const adminMessage = `
üîß Admin Panel

üìä ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®:
‚Ä¢ ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${userSessions.size}
‚Ä¢ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®: ${Array.from(userSessions.values()).filter((s) => s.step === "subscribed").length}

‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∏‡¶Æ‡ßÇ‡¶π:
/stats - ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®
/broadcast [message] - ‡¶∏‡¶ï‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
  `

  bot.sendMessage(msg.chat.id, adminMessage)
})

// Stats command for admin
bot.onText(/\/stats/, (msg) => {
  const userId = msg.from.id.toString()

  if (userId !== ADMIN_ID) {
    bot.sendMessage(msg.chat.id, "‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
    return
  }

  const sessions = Array.from(userSessions.values())
  const totalUsers = sessions.length
  const subscribedUsers = sessions.filter((s) => s.step === "subscribed").length
  const pendingPayments = sessions.filter((s) => s.paymentPending).length

  const statsMessage = `
üìä ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®

üë• ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${totalUsers}
‚úÖ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®: ${subscribedUsers}
‚è≥ ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü: ${pendingPayments}

üìà ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ:
‚Ä¢ 1 ‡¶Æ‡¶æ‡¶∏: ${sessions.filter((s) => s.selectedPlan === "1_month" && s.step === "subscribed").length}
‚Ä¢ 2 ‡¶Æ‡¶æ‡¶∏: ${sessions.filter((s) => s.selectedPlan === "2_month" && s.step === "subscribed").length}
‚Ä¢ 3 ‡¶Æ‡¶æ‡¶∏: ${sessions.filter((s) => s.selectedPlan === "3_month" && s.step === "subscribed").length}
  `

  bot.sendMessage(msg.chat.id, statsMessage)
})

// Error handling
bot.on("polling_error", (error) => {
  console.log("Polling error:", error)
})

console.log("ü§ñ Movies Verse BD Bot started successfully!")
console.log("Bot is now listening for messages...")
